import pygame
import pygame_gui
from myClasses import Grid, Cell, Animal, Fox, Rabbit
import matplotlib.pyplot as plt


class PredatorPrey:

  def __init__(self):
    self._init_pygame()
    self.gameState = "PAUSED"
    self.clock = pygame.time.Clock()
    self.screen = pygame.display.set_mode((800, 450))
    self.grid = Grid(20, 20)
    self.manager = pygame_gui.UIManager((800, 450))
    self.foxstart = 20
    self.rabbitstart = 120
    self.foxhistory = []
    self.rabbithistory = []
    self.grid.addFoxes(self.foxstart)
    self.grid.addRabbits(self.rabbitstart)

  def reset(self):
    self.grid = Grid(20, 20)
    self.grid.addFoxes(self.foxstart)
    self.grid.addRabbits(self.rabbitstart)
    self.foxhistory = []
    self.rabbithistory = []

  def changeFoxes(self):
    #clear grid of any Foxes
    for row in range(20):
      for col in range(20):
        if len(self.grid.environment[row][col].inhabitant) > 0 and isinstance(
            self.grid.environment[row][col].inhabitant[0], Fox):
          self.grid.environment[row][col].inhabitant = []
    #add Foxes back to grid
    self.grid.addFoxes(self.foxstart)

  def changeRabbits(self):
    #clear grid of any Rabbits
    for row in range(20):
      for col in range(20):
        if len(self.grid.environment[row][col].inhabitant) > 0 and isinstance(
            self.grid.environment[row][col].inhabitant[0], Rabbit):
          self.grid.environment[row][col].inhabitant = []
    #add Rabbits back to grid
    self.grid.addRabbits(self.rabbitstart)

  def main_loop(self):
    #set up GUI elements
    self.reset_button = pygame_gui.elements.UIButton(
      relative_rect=pygame.Rect((500, 50), (100, 50)),
      text='RESET',
      manager=self.manager)  #setup reset button
    self.runpause_button = pygame_gui.elements.UIButton(
      relative_rect=pygame.Rect((500, 100), (100, 50)),
      text='RUN',
      manager=self.manager)  #setup run button
    self.fox_slider = pygame_gui.elements.UIHorizontalSlider(
      relative_rect=pygame.Rect((500, 170), (100, 29)),
      start_value=10,
      value_range=(0, 100),
      manager=self.manager)
    self.rabbit_slider = pygame_gui.elements.UIHorizontalSlider(
      relative_rect=pygame.Rect((500, 200), (100, 29)),
      start_value=80,
      value_range=(0, 100),
      manager=self.manager)
    self.fox_counter = pygame_gui.elements.UITextBox(relative_rect=pygame.Rect(
      (605, 170), (150, 29)),
                                                     html_text="Foxes:")
    self.rab_counter = pygame_gui.elements.UITextBox(relative_rect=pygame.Rect(
      (605, 200), (150, 29)),
                                                     html_text="Rabbits:")
    #main loop for simulation
    pauseloop = 2  #to bypass drawing graph at start of simulation when paused
    while True:
      time_delta = self.clock.tick(60) / 1000.0
      self._handle_input()
      if self.gameState == "PAUSED":
        pauseloop += 1
        if (pauseloop == 1):
          print(self.foxhistory)
          print(self.rabbithistory)
          xpoints = [x for x in range(len(self.rabbithistory))]
          plt.plot(xpoints, self.rabbithistory)
          plt.plot(xpoints, self.foxhistory)
          plt.show()
        pass  #skip processing if simulation is paused

      else:
        pauseloop = 0
        self._process_game_logic()
        rabbits = 0
        foxes = 0
        for row in range(20):
          for col in range(20):
            if len(self.grid.environment[row][col].inhabitant) > 0:
              for animal in self.grid.environment[row][col].inhabitant:
                if isinstance(animal, Rabbit):
                  rabbits += 1
                if isinstance(animal, Fox):
                  foxes += 1
        #display count of foxes and rabbits
        self.foxhistory.append(foxes)
        self.rabbithistory.append(rabbits)
        self.fox_counter.set_text(f"Foxes: {foxes}<br>Rabbits: {rabbits}")
        self.rab_counter.set_text(f"Rabbits: {rabbits}")
      self.manager.update(time_delta)
      #count up number of rabbits and foxes currently in simulation

      #draw the simulation
      self._draw()

  def _init_pygame(self):
    pygame.init()
    pygame.display.set_caption("Predator Prey")

  def _handle_input(self):
    for event in pygame.event.get():
      if event.type == pygame.QUIT:
        is_running = False
      if event.type == pygame_gui.UI_BUTTON_PRESSED:  #a button has been pressed
        if event.ui_element == self.reset_button:
          self.gameState = "PAUSED"
          self.reset()
        if event.ui_element == self.runpause_button:
          if self.gameState == "PAUSED":
            self.gameState = "RUNNING"
            self.runpause_button.set_text("PAUSE")
          else:
            self.gameState = "PAUSED"
            self.runpause_button.set_text("RUN")

      if event.type == pygame_gui.UI_HORIZONTAL_SLIDER_MOVED:
        if event.ui_element == self.fox_slider:
          print('current slider value:', event.value)
          self.foxstart = event.value
          self.changeFoxes()
        if event.ui_element == self.rabbit_slider:
          print('current slider value:', event.value)
          self.rabbitstart = event.value
          self.changeRabbits()
      self.manager.process_events(event)

  def _process_game_logic(self):
    self.grid.processMove()
    pass

  def _draw(self):         #drawing animals
    self.screen.fill((255, 255, 255))
    pygame.draw.rect(self.screen, (128, 0, 0), (500, 270, 10, 10))
    f1 = pygame.font.Font(None, 25)
    self.screen.blit(f1.render('Male fox', 1, (128, 0, 0)), (530, 265))
    self.screen.blit(f1.render('Female fox', 1, (255, 0, 0)), (530, 295))
    self.screen.blit(f1.render('Male rabbit', 1, (0, 0, 255)), (530, 325))
    self.screen.blit(f1.render('Female rabbit', 1, (64, 224, 208)), (530, 355))
    pygame.draw.rect(self.screen, (255, 0, 0), (500, 300, 10, 10))
    pygame.draw.rect(self.screen, (0, 0, 255), (500, 330, 10, 10))
    pygame.draw.rect(self.screen, (64, 224, 208), (500, 360, 10, 10))
    for row in range(20):         #drawing a grid of grass
      for col in range(20):
        pygame.draw.rect(
          self.screen, (0, self.grid.environment[row][col].getFood() * 25, 0),
          (20 + row * 20, 20 + col * 20, 20, 20))
        if len(self.grid.environment[row][col].inhabitant) > 0:
          for animal in self.grid.environment[row][col].inhabitant:

            if isinstance(animal, Rabbit):
              if animal.gender == "F":
                pygame.draw.rect(
                  self.screen, (64, 224, 208),
                  (20 + row * 20 + 5, 20 + col * 20 + 5, 10, 10))
              else:
                pygame.draw.rect(
                  self.screen, (0, 0, 255),
                  (20 + row * 20 + 5, 20 + col * 20 + 5, 10, 10))
            if isinstance(animal, Fox):
              if animal.gender == "F":
                pygame.draw.rect(
                  self.screen, (255, 0, 0),
                  (20 + row * 20 + 5, 20 + col * 20 + 5, 10, 10))
              else:
                pygame.draw.rect(
                  self.screen, (128, 0, 0),
                  (20 + row * 20 + 5, 20 + col * 20 + 5, 10, 10))

    self.manager.draw_ui(self.screen)
    pygame.display.flip()
    self.clock.tick(10)


space_rocks = PredatorPrey()
space_rocks.main_loop()
